
------------------------------------------------------------------------------
-- Get the sum of a list of numbers

sum(list) = reduce(add, 0, list)

------------------------------------------------------------------------------
-- Get a list of numbers:
--   [a, a + 1, a + 2, ... b] if a < b
--   [a, a - 1, a - 2, ... b] if a > b
--   [a]                      if a == b

range(a, b) =
  if a < b then minToMax else reverse(minToMax)
  where minToMax = rangeUp(min(a, b), max(a, b))

rangeUp(a, b) =
  iterate(add(1), a)
  |> takeWhile(lessEq(b))

------------------------------------------------------------------------------
-- Convert a number or a string to a float

toFloat(val) = val.!getFloat

------------------------------------------------------------------------------
-- Convert a number or a string to an integer (truncates floats)

toInt(val) = val.!getInt

------------------------------------------------------------------------------
-- Round number down

floor(n) =
  if n > 0 then toInt(n)
  else toInt(n - 1)

------------------------------------------------------------------------------
-- Round number up

ceil(n) = floor(n + 1)

------------------------------------------------------------------------------
-- Round a number to the nearest int value

round(n) = sign * (base + correction) where {
  sign = if n < 0 then -1 else 1
  base = toInt(abs(n))
  frac = abs(n) - base
  correction = if frac < .5 then 0 else 1
}

------------------------------------------------------------------------------

asin(n) = n.!getAsin

------------------------------------------------------------------------------

acos(n) = n.!getAcos

------------------------------------------------------------------------------

atan(n) = n.!getAtan

------------------------------------------------------------------------------
-- https://en.wikipedia.org/wiki/Atan2#Definition_and_computation

atan2(y, x) = cond {
  case x < 0  and y >= 0 atan(y / x) + pi 
  case x < 0  and y < 0  atan(y / x) - pi 
  case x == 0 and y > 0  pi / 2
  case x == 0 and y < 0  -pi / 2
  else                   atan(y / x)
}

------------------------------------------------------------------------------

sin(n) = n.!getSin

------------------------------------------------------------------------------

cos(n) = n.!getCos

------------------------------------------------------------------------------

tan(n) = n.!getTan

------------------------------------------------------------------------------

ln(n) = n.!getLn

------------------------------------------------------------------------------

logBase(b, a) = ln(a) / ln(b)

------------------------------------------------------------------------------
-- pi, to as many digits as I could remember

pi = 3.14159265358979323846264338327950

------------------------------------------------------------------------------
-- e, to as many digits as I could remember

euler = 2.71828

------------------------------------------------------------------------------
-- Get the absolute-value of a number 

abs(n) = if n < 0 then -n else n

------------------------------------------------------------------------------
-- pow(b, a) = a ** b

pow(b, a) = a ** b

------------------------------------------------------------------------------
-- mul(b, a) = a * b

mul(b, a) = a * b

------------------------------------------------------------------------------
-- div(b, a) = a / b

div(b, a) = a / b

------------------------------------------------------------------------------
-- mod(b, a) = a % b

mod(b, a) = a % b

------------------------------------------------------------------------------
-- add(b, a) = b + a

add(b, a) = b + a

------------------------------------------------------------------------------
-- sub(b, a) = b - a

sub(b, a) = b - a

------------------------------------------------------------------------------
-- Get the larger of two numbers

max(a, b) = if a > b then a else b

------------------------------------------------------------------------------
-- Get the smaller of two numbers

min(a, b) = if a < b then a else b

------------------------------------------------------------------------------
-- Get the smallest number in a non-empty collection

minimum(values) =
  values
  |> toList
  |> reduceFirst(min)

------------------------------------------------------------------------------
-- Get the largest number in a non-empty collection

maximum(values) =
  values
  |> toList
  |> reduceFirst(max)

------------------------------------------------------------------------------

argmin(func, values) =
  map(func, values)
  |> zip(values)
  |> reduceFirst((a, b) => if at(1, a) < at(1, b) then a else b)
  |> at(0)

------------------------------------------------------------------------------

argmax(func, values) =
  map(func, values)
  |> zip(values)
  |> reduceFirst((a, b) => if at(1, a) > at(1, b) then a else b)
  |> at(0)
